{"version":3,"sources":["Header.js","ItemLista.js","Listagem.js","Detalhes.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","id","to","Component","ItemLista","props","className","src","foto","alt","classNameName","modelo","marca","Number","precoMedio","toLocaleString","style","currency","Listagem","state","brinquedos","loadBrinquedos","a","navigator","onLine","firebase","collection","orderBy","onSnapshot","snapshot","docChanges","forEach","change","type","push","doc","data","map","brinquedo","filter","setState","localStorage","setItem","JSON","stringify","parse","getItem","dados","this","key","tipo","reputacao","Detalhes","params","match","get","then","exists","console","log","catch","error","classNam","App","path","exact","component","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.797dd445.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <nav class=\"nav-extended\">\r\n                    <div class=\"nav-wrapper\">\r\n                        <a class=\"brand-logo center\">Modelismo Show</a>\r\n                        <ul id=\"nav-mobile\" class=\"left hide-on-med-and-down\">\r\n                            <Link to={'/'}><li><a>Home</a></li></Link>\r\n                        </ul>\r\n                    </div>\r\n                </nav>\r\n                <div>\r\n                    <h6 class='text center'>Conheça alguns modelos</h6>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst ItemLista = props => {\r\n    return (\r\n\r\n        <div className=\"col s4\">\r\n            <div className=\"card\">\r\n                <div className=\"card-image\">\r\n                    <Link to={`/detalhes/${props.id}`}><img src={props.foto} alt=\"Foto\" classNameName=\"card-img-top\" /></Link>\r\n                    <span className=\"card-title black-text\">{props.modelo}</span>\r\n                </div>\r\n                <div className=\"card-content\">\r\n                    <p><b>Marca:</b> {props.marca}</p>\r\n                    <p><b>Preço Médio:</b> {Number(props.precoMedio).toLocaleString('pt-br', { style: 'currency', currency: 'BRL' })}</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ItemLista","import React, { Component } from 'react'\r\n\r\nimport * as firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\n\r\nimport ItemLista from './ItemLista'\r\n\r\nimport './Listagem.css'\r\n\r\n\r\nexport default class Listagem extends Component {\r\n\r\n    state = {\r\n        brinquedos: []\r\n    }\r\n\r\n    // método acionado logo após a construção da view\r\n    componentDidMount() {\r\n        this.loadBrinquedos()\r\n    }\r\n\r\n    loadBrinquedos = async () => {\r\n        let brinquedos = []\r\n\r\n        if (navigator.onLine) {\r\n\r\n            firebase.firestore().collection('brinquedos').orderBy('modelo').onSnapshot(snapshot => {\r\n\r\n                snapshot.docChanges().forEach(change => {\r\n\r\n                    if (change.type === \"added\") {\r\n                        brinquedos.push({ id: change.doc.id, ...change.doc.data() })\r\n                    }\r\n\r\n                    if (change.type === \"modified\") {\r\n                        brinquedos = brinquedos.map(brinquedo => brinquedo.id === change.doc.id ?\r\n                            { id: change.doc.id, ...change.doc.data() }\r\n                            : brinquedo)\r\n                    }\r\n\r\n                    if (change.type === \"removed\") {\r\n                        brinquedos = brinquedos.filter(brinquedo => brinquedo.id !== change.doc.id)\r\n                    }\r\n                })\r\n                this.setState({ brinquedos })\r\n                localStorage.setItem('brinquedos_modelos', JSON.stringify(brinquedos))\r\n            })\r\n\r\n        } else {\r\n            let dados = await JSON.parse(localStorage.getItem('brinquedos_modelos'))\r\n            brinquedos = dados;\r\n            this.setState({ brinquedos })\r\n\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container mt2\">\r\n                <div className=\"row\">\r\n                    {this.state.brinquedos.map((brinquedo) => (\r\n                        <ItemLista key={brinquedo.id}\r\n                            id={brinquedo.id}\r\n                            modelo={brinquedo.modelo}\r\n                            foto={brinquedo.foto}\r\n                            tipo={brinquedo.tipo}\r\n                            marca={brinquedo.marca}\r\n                            reputacao={brinquedo.reputacao}\r\n                            precoMedio={brinquedo.precoMedio} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\n\r\nimport * as firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\n\r\n\r\n\r\nexport default class Detalhes extends Component {\r\n\r\n    state = {\r\n        id: '',\r\n        modelo: '',\r\n        tipo: '',\r\n        marca: '',\r\n        precoMedio: '',\r\n        reputacao: '',\r\n        foto: '',\r\n    }\r\n\r\n    componentDidMount() {\r\n        // obtém os parâmetros passados para a classe\r\n        const { match: { params } } = this.props\r\n\r\n        const db = firebase.firestore()\r\n\r\n        var docRef = db.collection(\"brinquedos\").doc(params.id);\r\n\r\n        docRef.get().then(doc => {\r\n            if (doc.exists) {\r\n                this.setState({ id: doc.id, ...doc.data() })\r\n            } else {\r\n                // doc.data() will be undefined in this case\r\n                console.log(\"Erro...\");\r\n            }\r\n        }).catch(function (error) {\r\n            console.log(\"Error de conexão:\", error);\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div classNam=\"container\">\r\n                <div className=\"row\" id=\"textodetalhe\">\r\n                    <div className=\"col s12 m6\">\r\n                        <img src={this.state.foto} alt=\"Foto\" id=\"fotodetalhe\" />\r\n                    </div>\r\n                    <div className=\"col s12 m4\">\r\n                        <h5>\r\n                            Modelo: {this.state.modelo}\r\n                        </h5>\r\n                        <p>\r\n                            {this.state.reputacao}\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport { HashRouter, BrowserRouter as Router, Route } from \"react-router-dom\"\n\nimport Header from './Header';\nimport Listagem from './Listagem';\nimport Detalhes from './Detalhes'\n\nfunction App() {\n  return (\n    <div>\n      <HashRouter>\n        <Header />\n        <Route path=\"/\" exact component={Listagem} />\n        <Route path=\"/detalhes/:id\" component={Detalhes} />\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (/*process.env.NODE_ENV === 'production' && */'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/custom-service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport * as firebase from 'firebase/app'\nimport 'firebase/firestore'\n\n\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCRgtUQbzfAEfhaCGM1hcRJQyfdZnpO4DM\",\n    authDomain: \"modelismopdm.firebaseapp.com\",\n    databaseURL: \"https://modelismopdm.firebaseio.com\",\n    projectId: \"modelismopdm\",\n    storageBucket: \"modelismopdm.appspot.com\",\n    messagingSenderId: \"1027531264381\",\n    appId: \"1:1027531264381:web:5fea78a06003a494e3fc14\",\n    measurementId: \"G-WDY33G0YC4\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}